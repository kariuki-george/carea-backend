generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



// User and auth

enum Role {
  ADMIN
  BUYER
  SUBADMIN
}

model addresses {
  id     Int      @id @default(autoincrement())
  details String   
  name    String   
  user  users @relation(fields: [userId], references: [id])
  userId Int
}

model users {
  id        Int @id @default(autoincrement())
  address   addresses[]
  email     String   
  firstName String?   
  lastName  String?   
  password  String    
  role      Role @default(BUYER)
  verified  Boolean?     @default(false)
  lastSignInAt DateTime?
  emailVerifyToken String?
  passwordChangeToken String?
  refreshToken String?
  

  @@unique([email])
}




//carea

enum CarCondition {
  NEW
  USED
}

model categories {
  id      Int      @id @default(autoincrement())
  imageUrl String   @db.Text
  name     String     @unique
  cars    cars[]

}

model reviews {
  id  Int   @id @default(autoincrement())
  rating Float?
  name String?   
  review String? 
  userId  Int  
  car   cars @relation(fields: [carId], references: [id])
  carId Int
}

model carGallery{
id Int @id @default(autoincrement())
imageUrl String 
car cars @relation(fields: [carId],references: [id])
carId Int
}

model cars {
  id        Int   @id @default(autoincrement())
  checkout   Boolean @default(false)
  condition  CarCondition @default(NEW)
  desc       String 
  gallery    carGallery[]
 
  name       String   
  price      Int
  publish    Boolean @default(false)
  stock      Int
  category    categories @relation(fields: [categoryId], references: [id])
  categoryId   Int  
  reviews      reviews[]
  createdAt DateTime @unique @default(now())

  @@unique([name])
}

//orders



enum OrderStatus {
  PAID  
  UNPAID
}

model orders {
   id      Int      @id @default(autoincrement())
   userId   Int
   addressId    Int
   status     OrderStatus @default(PROCESSING)
   carId  Int

}



